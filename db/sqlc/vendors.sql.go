// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: vendors.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createVendors = `-- name: CreateVendors :one
INSERT INTO vendors (
    vendor_id,
    vendor_name,
    contact_name,
    product_type,
    email,
    phone,
    status
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING vendor_id, vendor_name, contact_name, product_type, email, phone, status, created_at, updated_at
`

type CreateVendorsParams struct {
	VendorID    uuid.UUID   `json:"vendor_id"`
	VendorName  string      `json:"vendor_name"`
	ContactName string      `json:"contact_name"`
	ProductType []string    `json:"product_type"`
	Email       pgtype.Text `json:"email"`
	Phone       pgtype.Text `json:"phone"`
	Status      string      `json:"status"`
}

func (q *Queries) CreateVendors(ctx context.Context, arg CreateVendorsParams) (Vendor, error) {
	row := q.db.QueryRow(ctx, createVendors,
		arg.VendorID,
		arg.VendorName,
		arg.ContactName,
		arg.ProductType,
		arg.Email,
		arg.Phone,
		arg.Status,
	)
	var i Vendor
	err := row.Scan(
		&i.VendorID,
		&i.VendorName,
		&i.ContactName,
		&i.ProductType,
		&i.Email,
		&i.Phone,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVendorsByStatus = `-- name: GetVendorsByStatus :many
SELECT
    vendor_id, vendor_name, contact_name, product_type, email, phone, status, created_at, updated_at
FROM
    vendors
WHERE
    status = $1
`

func (q *Queries) GetVendorsByStatus(ctx context.Context, status string) ([]Vendor, error) {
	rows, err := q.db.Query(ctx, getVendorsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vendor{}
	for rows.Next() {
		var i Vendor
		if err := rows.Scan(
			&i.VendorID,
			&i.VendorName,
			&i.ContactName,
			&i.ProductType,
			&i.Email,
			&i.Phone,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVendorsList = `-- name: GetVendorsList :many
SELECT
    vendor_id, vendor_name, contact_name, product_type, email, phone, status, created_at, updated_at
FROM
    vendors
`

func (q *Queries) GetVendorsList(ctx context.Context) ([]Vendor, error) {
	rows, err := q.db.Query(ctx, getVendorsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vendor{}
	for rows.Next() {
		var i Vendor
		if err := rows.Scan(
			&i.VendorID,
			&i.VendorName,
			&i.ContactName,
			&i.ProductType,
			&i.Email,
			&i.Phone,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVendor = `-- name: UpdateVendor :one
UPDATE
    vendors
SET
    vendor_name = COALESCE($2,vendor_name),
    contact_name = COALESCE($3,contact_name),
    email = COALESCE($4,email),
    phone = COALESCE($5,phone),
    status = COALESCE($6,status),
    updated_at = NOW()
WHERE
    vendor_id = $1 RETURNING vendor_id, vendor_name, contact_name, product_type, email, phone, status, created_at, updated_at
`

type UpdateVendorParams struct {
	VendorID    uuid.UUID   `json:"vendor_id"`
	VendorName  string      `json:"vendor_name"`
	ContactName string      `json:"contact_name"`
	Email       pgtype.Text `json:"email"`
	Phone       pgtype.Text `json:"phone"`
	Status      string      `json:"status"`
}

func (q *Queries) UpdateVendor(ctx context.Context, arg UpdateVendorParams) (Vendor, error) {
	row := q.db.QueryRow(ctx, updateVendor,
		arg.VendorID,
		arg.VendorName,
		arg.ContactName,
		arg.Email,
		arg.Phone,
		arg.Status,
	)
	var i Vendor
	err := row.Scan(
		&i.VendorID,
		&i.VendorName,
		&i.ContactName,
		&i.ProductType,
		&i.Email,
		&i.Phone,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateVendorStatus = `-- name: UpdateVendorStatus :one
UPDATE
    vendors
SET
    status = $2,
    last_updated_at = NOW()
WHERE
    vendor_id = $1 RETURNING vendor_id, vendor_name, contact_name, product_type, email, phone, status, created_at, updated_at
`

type UpdateVendorStatusParams struct {
	VendorID uuid.UUID `json:"vendor_id"`
	Status   string    `json:"status"`
}

func (q *Queries) UpdateVendorStatus(ctx context.Context, arg UpdateVendorStatusParams) (Vendor, error) {
	row := q.db.QueryRow(ctx, updateVendorStatus, arg.VendorID, arg.Status)
	var i Vendor
	err := row.Scan(
		&i.VendorID,
		&i.VendorName,
		&i.ContactName,
		&i.ProductType,
		&i.Email,
		&i.Phone,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
