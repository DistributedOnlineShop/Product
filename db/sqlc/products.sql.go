// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    vendor_id,
    name,
    category_id,
    description,
    price,
    discount,
    stock,
    status
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
) RETURNING product_id, vendor_id, name, category_id, description, price, discount, stock, status, created_at, updated_at
`

type CreateProductParams struct {
	VendorID    uuid.UUID      `json:"vendor_id"`
	Name        string         `json:"name"`
	CategoryID  uuid.UUID      `json:"category_id"`
	Description string         `json:"description"`
	Price       pgtype.Numeric `json:"price"`
	Discount    pgtype.Numeric `json:"discount"`
	Stock       int32          `json:"stock"`
	Status      string         `json:"status"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.VendorID,
		arg.Name,
		arg.CategoryID,
		arg.Description,
		arg.Price,
		arg.Discount,
		arg.Stock,
		arg.Status,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.VendorID,
		&i.Name,
		&i.CategoryID,
		&i.Description,
		&i.Price,
		&i.Discount,
		&i.Stock,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletProduct = `-- name: DeletProduct :exec
DELETE FROM 
    products 
WHERE 
    product_id = $1
`

func (q *Queries) DeletProduct(ctx context.Context, productID string) error {
	_, err := q.db.Exec(ctx, deletProduct, productID)
	return err
}

const getProductByProductId = `-- name: GetProductByProductId :one
SELECT 
    product_id, vendor_id, name, category_id, description, price, discount, stock, status, created_at, updated_at 
FROM 
    products 
WHERE 
    product_id = $1
`

func (q *Queries) GetProductByProductId(ctx context.Context, productID string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByProductId, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.VendorID,
		&i.Name,
		&i.CategoryID,
		&i.Description,
		&i.Price,
		&i.Discount,
		&i.Stock,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByVendorID = `-- name: GetProductByVendorID :many
SELECT
    product_id, vendor_id, name, category_id, description, price, discount, stock, status, created_at, updated_at
FROM 
    products 
WHERE 
    vendor_id = $1
`

func (q *Queries) GetProductByVendorID(ctx context.Context, vendorID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductByVendorID, vendorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.VendorID,
			&i.Name,
			&i.CategoryID,
			&i.Description,
			&i.Price,
			&i.Discount,
			&i.Stock,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    name = COALESCE($2,name),
    category_id = COALESCE($3,category_id),
    description = COALESCE($4,description),
    price = COALESCE($5,price),
    discount = COALESCE($6,discount),
    stock = COALESCE($7,stock),
    status = COALESCE($8,status),
    updated_at = NOW() 
WHERE
    product_id = $1 RETURNING product_id, vendor_id, name, category_id, description, price, discount, stock, status, created_at, updated_at
`

type UpdateProductParams struct {
	ProductID   string         `json:"product_id"`
	Name        string         `json:"name"`
	CategoryID  uuid.UUID      `json:"category_id"`
	Description string         `json:"description"`
	Price       pgtype.Numeric `json:"price"`
	Discount    pgtype.Numeric `json:"discount"`
	Stock       int32          `json:"stock"`
	Status      string         `json:"status"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ProductID,
		arg.Name,
		arg.CategoryID,
		arg.Description,
		arg.Price,
		arg.Discount,
		arg.Stock,
		arg.Status,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.VendorID,
		&i.Name,
		&i.CategoryID,
		&i.Description,
		&i.Price,
		&i.Discount,
		&i.Stock,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
