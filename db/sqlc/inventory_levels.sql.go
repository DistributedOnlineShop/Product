// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: inventory_levels.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createInventoryLevels = `-- name: CreateInventoryLevels :one
INSERT INTO inventory_levels (
    product_id,
    pv_id,
    stock
) VALUES (
    $1,
    $2,
    $3
) RETURNING inventory_id, product_id, pv_id, stock, updated_at
`

type CreateInventoryLevelsParams struct {
	ProductID string      `json:"product_id"`
	PvID      pgtype.Text `json:"pv_id"`
	Stock     int32       `json:"stock"`
}

func (q *Queries) CreateInventoryLevels(ctx context.Context, arg CreateInventoryLevelsParams) (InventoryLevel, error) {
	row := q.db.QueryRow(ctx, createInventoryLevels, arg.ProductID, arg.PvID, arg.Stock)
	var i InventoryLevel
	err := row.Scan(
		&i.InventoryID,
		&i.ProductID,
		&i.PvID,
		&i.Stock,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryLevelByInventoryId = `-- name: GetInventoryLevelByInventoryId :one
SELECT 
    inventory_id, product_id, pv_id, stock, updated_at 
FROM 
    inventory_levels 
WHERE 
    inventory_id = $1
`

func (q *Queries) GetInventoryLevelByInventoryId(ctx context.Context, inventoryID uuid.UUID) (InventoryLevel, error) {
	row := q.db.QueryRow(ctx, getInventoryLevelByInventoryId, inventoryID)
	var i InventoryLevel
	err := row.Scan(
		&i.InventoryID,
		&i.ProductID,
		&i.PvID,
		&i.Stock,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryLevelByPvid = `-- name: GetInventoryLevelByPvid :many
SELECT 
    inventory_id, product_id, pv_id, stock, updated_at 
FROM 
    inventory_levels 
WHERE 
    product_id = $1 AND pv_id = $2
`

type GetInventoryLevelByPvidParams struct {
	ProductID string      `json:"product_id"`
	PvID      pgtype.Text `json:"pv_id"`
}

func (q *Queries) GetInventoryLevelByPvid(ctx context.Context, arg GetInventoryLevelByPvidParams) ([]InventoryLevel, error) {
	rows, err := q.db.Query(ctx, getInventoryLevelByPvid, arg.ProductID, arg.PvID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InventoryLevel{}
	for rows.Next() {
		var i InventoryLevel
		if err := rows.Scan(
			&i.InventoryID,
			&i.ProductID,
			&i.PvID,
			&i.Stock,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInventoryLevel = `-- name: UpdateInventoryLevel :one
UPDATE 
    inventory_levels
SET 
    stock = $2,
    updated_at = NOW()
WHERE 
    inventory_id = $1 RETURNING inventory_id, product_id, pv_id, stock, updated_at
`

type UpdateInventoryLevelParams struct {
	InventoryID uuid.UUID `json:"inventory_id"`
	Stock       int32     `json:"stock"`
}

func (q *Queries) UpdateInventoryLevel(ctx context.Context, arg UpdateInventoryLevelParams) (InventoryLevel, error) {
	row := q.db.QueryRow(ctx, updateInventoryLevel, arg.InventoryID, arg.Stock)
	var i InventoryLevel
	err := row.Scan(
		&i.InventoryID,
		&i.ProductID,
		&i.PvID,
		&i.Stock,
		&i.UpdatedAt,
	)
	return i, err
}
