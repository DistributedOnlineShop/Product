// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: inventory_adjustments.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createInventoryAdjustments = `-- name: CreateInventoryAdjustments :one
INSERT INTO inventory_adjustments (
    adjustment_id,
    product_id,
    pv_id,
    adjustment_type,
    quantity,
    reason
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING adjustment_id, product_id, pv_id, adjustment_type, quantity, reason, created_at
`

type CreateInventoryAdjustmentsParams struct {
	AdjustmentID   uuid.UUID `json:"adjustment_id"`
	ProductID      string    `json:"product_id"`
	PvID           string    `json:"pv_id"`
	AdjustmentType string    `json:"adjustment_type"`
	Quantity       int32     `json:"quantity"`
	Reason         string    `json:"reason"`
}

func (q *Queries) CreateInventoryAdjustments(ctx context.Context, arg CreateInventoryAdjustmentsParams) (InventoryAdjustment, error) {
	row := q.db.QueryRow(ctx, createInventoryAdjustments,
		arg.AdjustmentID,
		arg.ProductID,
		arg.PvID,
		arg.AdjustmentType,
		arg.Quantity,
		arg.Reason,
	)
	var i InventoryAdjustment
	err := row.Scan(
		&i.AdjustmentID,
		&i.ProductID,
		&i.PvID,
		&i.AdjustmentType,
		&i.Quantity,
		&i.Reason,
		&i.CreatedAt,
	)
	return i, err
}

const getInventoryAdjustmentsByAdjustmentById = `-- name: GetInventoryAdjustmentsByAdjustmentById :one
SELECT 
    adjustment_id, product_id, pv_id, adjustment_type, quantity, reason, created_at 
FROM 
    inventory_adjustments
WHERE 
    adjustment_id = $1
`

func (q *Queries) GetInventoryAdjustmentsByAdjustmentById(ctx context.Context, adjustmentID uuid.UUID) (InventoryAdjustment, error) {
	row := q.db.QueryRow(ctx, getInventoryAdjustmentsByAdjustmentById, adjustmentID)
	var i InventoryAdjustment
	err := row.Scan(
		&i.AdjustmentID,
		&i.ProductID,
		&i.PvID,
		&i.AdjustmentType,
		&i.Quantity,
		&i.Reason,
		&i.CreatedAt,
	)
	return i, err
}

const getInventoryAdjustmentsByPvid = `-- name: GetInventoryAdjustmentsByPvid :many
SELECT 
    adjustment_id, product_id, pv_id, adjustment_type, quantity, reason, created_at 
FROM 
    inventory_adjustments
WHERE 
    product_id = $1 AND pv_id = $2
`

type GetInventoryAdjustmentsByPvidParams struct {
	ProductID string `json:"product_id"`
	PvID      string `json:"pv_id"`
}

func (q *Queries) GetInventoryAdjustmentsByPvid(ctx context.Context, arg GetInventoryAdjustmentsByPvidParams) ([]InventoryAdjustment, error) {
	rows, err := q.db.Query(ctx, getInventoryAdjustmentsByPvid, arg.ProductID, arg.PvID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InventoryAdjustment{}
	for rows.Next() {
		var i InventoryAdjustment
		if err := rows.Scan(
			&i.AdjustmentID,
			&i.ProductID,
			&i.PvID,
			&i.AdjustmentType,
			&i.Quantity,
			&i.Reason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInventoryAdjustmentsByType = `-- name: GetInventoryAdjustmentsByType :many
SELECT 
    adjustment_id, product_id, pv_id, adjustment_type, quantity, reason, created_at 
FROM 
    inventory_adjustments
WHERE 
    adjustment_type = $1
`

func (q *Queries) GetInventoryAdjustmentsByType(ctx context.Context, adjustmentType string) ([]InventoryAdjustment, error) {
	rows, err := q.db.Query(ctx, getInventoryAdjustmentsByType, adjustmentType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InventoryAdjustment{}
	for rows.Next() {
		var i InventoryAdjustment
		if err := rows.Scan(
			&i.AdjustmentID,
			&i.ProductID,
			&i.PvID,
			&i.AdjustmentType,
			&i.Quantity,
			&i.Reason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
