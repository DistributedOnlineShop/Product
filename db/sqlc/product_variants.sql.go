// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_variants.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductVariants = `-- name: CreateProductVariants :one
INSERT INTO product_variants (
    product_id,
    sku,
    price,
    stock,
    attributes,
    status
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING pv_id, product_id, sku, price, stock, attributes, status, created_at, updated_at
`

type CreateProductVariantsParams struct {
	ProductID  string         `json:"product_id"`
	Sku        pgtype.Text    `json:"sku"`
	Price      pgtype.Numeric `json:"price"`
	Stock      int32          `json:"stock"`
	Attributes []byte         `json:"attributes"`
	Status     string         `json:"status"`
}

func (q *Queries) CreateProductVariants(ctx context.Context, arg CreateProductVariantsParams) (ProductVariant, error) {
	row := q.db.QueryRow(ctx, createProductVariants,
		arg.ProductID,
		arg.Sku,
		arg.Price,
		arg.Stock,
		arg.Attributes,
		arg.Status,
	)
	var i ProductVariant
	err := row.Scan(
		&i.PvID,
		&i.ProductID,
		&i.Sku,
		&i.Price,
		&i.Stock,
		&i.Attributes,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductVariantsByPvid = `-- name: DeleteProductVariantsByPvid :exec
DELETE FROM 
    product_variants 
WHERE 
    pv_id = $1
`

func (q *Queries) DeleteProductVariantsByPvid(ctx context.Context, pvID string) error {
	_, err := q.db.Exec(ctx, deleteProductVariantsByPvid, pvID)
	return err
}

const getProductVariantsByProductId = `-- name: GetProductVariantsByProductId :many
SELECT 
    pv_id, product_id, sku, price, stock, attributes, status, created_at, updated_at 
FROM 
    product_variants 
WHERE 
    product_id = $1
`

func (q *Queries) GetProductVariantsByProductId(ctx context.Context, productID string) ([]ProductVariant, error) {
	rows, err := q.db.Query(ctx, getProductVariantsByProductId, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariant{}
	for rows.Next() {
		var i ProductVariant
		if err := rows.Scan(
			&i.PvID,
			&i.ProductID,
			&i.Sku,
			&i.Price,
			&i.Stock,
			&i.Attributes,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductVariantsByPvid = `-- name: GetProductVariantsByPvid :one
SELECT 
    pv_id, product_id, sku, price, stock, attributes, status, created_at, updated_at 
FROM 
    product_variants 
WHERE 
    pv_id = $1
`

func (q *Queries) GetProductVariantsByPvid(ctx context.Context, pvID string) (ProductVariant, error) {
	row := q.db.QueryRow(ctx, getProductVariantsByPvid, pvID)
	var i ProductVariant
	err := row.Scan(
		&i.PvID,
		&i.ProductID,
		&i.Sku,
		&i.Price,
		&i.Stock,
		&i.Attributes,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductVariantsByStatus = `-- name: GetProductVariantsByStatus :many
SELECT 
    pv_id, product_id, sku, price, stock, attributes, status, created_at, updated_at 
FROM 
    product_variants 
WHERE 
    status = $1
`

func (q *Queries) GetProductVariantsByStatus(ctx context.Context, status string) ([]ProductVariant, error) {
	rows, err := q.db.Query(ctx, getProductVariantsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariant{}
	for rows.Next() {
		var i ProductVariant
		if err := rows.Scan(
			&i.PvID,
			&i.ProductID,
			&i.Sku,
			&i.Price,
			&i.Stock,
			&i.Attributes,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductVariant = `-- name: UpdateProductVariant :one
UPDATE 
    product_variants 
SET
    sku = COALESCE($2, sku),
    price = COALESCE($3, price),
    stock = COALESCE($4, stock),
    attributes = COALESCE($5, attributes),
    status = COALESCE($6, status),
    updated_at = NOW()
WHERE 
    pv_id = $1 RETURNING pv_id, product_id, sku, price, stock, attributes, status, created_at, updated_at
`

type UpdateProductVariantParams struct {
	PvID       string         `json:"pv_id"`
	Sku        pgtype.Text    `json:"sku"`
	Price      pgtype.Numeric `json:"price"`
	Stock      int32          `json:"stock"`
	Attributes []byte         `json:"attributes"`
	Status     string         `json:"status"`
}

func (q *Queries) UpdateProductVariant(ctx context.Context, arg UpdateProductVariantParams) (ProductVariant, error) {
	row := q.db.QueryRow(ctx, updateProductVariant,
		arg.PvID,
		arg.Sku,
		arg.Price,
		arg.Stock,
		arg.Attributes,
		arg.Status,
	)
	var i ProductVariant
	err := row.Scan(
		&i.PvID,
		&i.ProductID,
		&i.Sku,
		&i.Price,
		&i.Stock,
		&i.Attributes,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
